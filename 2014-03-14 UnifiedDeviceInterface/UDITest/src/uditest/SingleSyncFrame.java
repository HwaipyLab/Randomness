package uditest;

import com.hwaipy.unifieddeviceinterface.timeevent.data.TimeEventData;
import com.hwaipy.unifieddeviceinterface.timeevent.data.collections.SetableTimeEventListData;
import com.hwaipy.unifieddeviceinterface.timeevent.data.collections.TimeEventClusterData;
import com.hwaipy.unifieddeviceinterface.timeevent.data.io.TimeEventDataManager;
import com.hwaipy.unifieddeviceinterface.timeevent.data.process.CoincidenceScaner;
import com.hwaipy.unifieddeviceinterface.timeevent.data.process.RecursionCoincidenceMatcher;
import com.hwaipy.unifieddeviceinterface.timeevent.data.process.TimeCalibrator;
import com.hwaipy.unifieddeviceinterface.timeevent.pxi.PXITimeEventDataFileLoaderFactory;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.util.Iterator;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFormattedTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 *
 * @author Hwaipy
 */
public class SingleSyncFrame extends javax.swing.JFrame {

    private final BlockingQueue<Runnable> tasks = new LinkedBlockingQueue<>(20);
    private File tdcFile1;
    private File tdcFile2;

    /**
     * Creates new form SingleSyncFrame
     */
    public SingleSyncFrame() {
        Thread thread = new Thread(() -> {
            while (true) {
                try {
                    Runnable runnable = tasks.take();
                    runnable.run();
                } catch (InterruptedException ex) {
                    StringWriter stringWriter = new StringWriter();
                    ex.printStackTrace(new PrintWriter(stringWriter));
                    SwingUtilities.invokeLater((Runnable) () -> {
                        out.append(System.lineSeparator() + System.lineSeparator()
                                + "Error!" + System.lineSeparator()
                                + stringWriter.toString());
                    });
                }
            }
        }, "SingleSyncFrameThread");
        thread.setDaemon(true);
        thread.start();
        initComponents();
        gpsOffsetField.setValue(0);
        gpsGateField.setValue(1000000000l);
        syncOffsetField.setValue(0);
        syncGateField.setValue(1000000);
        coincidenceGateField.setValue(3000);
        coincidenceScanRangeField.setValue(100);
        coincidenceSteplengthField.setValue(100);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        tdc1FileNameField = new javax.swing.JTextField();
        tdc1FileSelectionButton = new javax.swing.JButton();
        tdc2FileSelectionButton = new javax.swing.JButton();
        tdc2FileNameField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        gpsOffsetField = new javax.swing.JFormattedTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        gpsGateField = new javax.swing.JFormattedTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        syncOffsetField = new javax.swing.JFormattedTextField();
        jLabel6 = new javax.swing.JLabel();
        syncGateField = new javax.swing.JFormattedTextField();
        jButton1 = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        out = new javax.swing.JTextArea();
        jLabel9 = new javax.swing.JLabel();
        coincidenceGateField = new javax.swing.JFormattedTextField();
        jLabel10 = new javax.swing.JLabel();
        coincidenceScanRangeField = new javax.swing.JFormattedTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        coincidenceSteplengthField = new javax.swing.JFormattedTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        jFileChooser1.setCurrentDirectory(new java.io.File("/Users/Hwaipy/Desktop/DAT/sim1"));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tdc1FileNameField.setEditable(false);
        tdc1FileNameField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        tdc1FileSelectionButton.setText("TDC1");
        tdc1FileSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tdc1FileSelectionButtonActionPerformed(evt);
            }
        });

        tdc2FileSelectionButton.setText("TDC2");
        tdc2FileSelectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tdc2FileSelectionButtonActionPerformed(evt);
            }
        });

        tdc2FileNameField.setEditable(false);
        tdc2FileNameField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel1.setText("GPS:");

        gpsOffsetField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        gpsOffsetField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel2.setText("offset");

        jLabel3.setText("gate");

        gpsGateField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        gpsGateField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel4.setText("Sync:");

        jLabel5.setText("offset");

        syncOffsetField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        syncOffsetField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel6.setText("gate");

        syncGateField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        syncGateField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jButton1.setFont(new java.awt.Font("Lucida Grande", 0, 48)); // NOI18N
        jButton1.setText("GO");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel7.setText("ps");

        jLabel8.setText("ps");

        out.setColumns(20);
        out.setRows(5);
        out.setTabSize(4);
        jScrollPane1.setViewportView(out);

        jLabel9.setText("Coincidence:");

        coincidenceGateField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        coincidenceGateField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel10.setText("ps");

        coincidenceScanRangeField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        coincidenceScanRangeField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel11.setText("ns");

        jLabel12.setText("scan range");

        coincidenceSteplengthField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(java.text.NumberFormat.getIntegerInstance())));
        coincidenceSteplengthField.setHorizontalAlignment(javax.swing.JTextField.TRAILING);

        jLabel13.setText("ps");

        jLabel14.setText("steplength");

        jLabel15.setText("gate");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tdc1FileSelectionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tdc1FileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(tdc2FileSelectionButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tdc2FileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(30, 30, 30)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gpsOffsetField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(gpsGateField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)))
                            .addComponent(jLabel9)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(syncOffsetField, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel6)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(syncGateField, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addGap(36, 36, 36)
                                    .addComponent(coincidenceGateField, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel10))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel15)
                                    .addGap(118, 118, 118)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(coincidenceScanRangeField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel11)
                                .addGap(38, 38, 38)
                                .addComponent(jLabel14)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coincidenceSteplengthField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel13)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 402, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tdc1FileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(tdc1FileSelectionButton))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(tdc2FileSelectionButton)
                            .addComponent(tdc2FileNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(gpsOffsetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(gpsGateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(syncOffsetField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(syncGateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel8))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(coincidenceGateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jLabel15))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel13)
                                .addComponent(jLabel14)
                                .addComponent(coincidenceSteplengthField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel11)
                                .addComponent(jLabel12)
                                .addComponent(coincidenceScanRangeField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addGap(19, 19, 19))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tdc1FileSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tdc1FileSelectionButtonActionPerformed
        if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            tdcFile1 = jFileChooser1.getSelectedFile();
            tdc1FileNameField.setText(tdcFile1.getName());
        }
    }//GEN-LAST:event_tdc1FileSelectionButtonActionPerformed

    private void tdc2FileSelectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tdc2FileSelectionButtonActionPerformed
        if (jFileChooser1.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            tdcFile2 = jFileChooser1.getSelectedFile();
            tdc2FileNameField.setText(tdcFile2.getName());
        }
    }//GEN-LAST:event_tdc2FileSelectionButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        perform();
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(SingleSyncFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        TimeEventDataManager.registerLoaderFactory("PXI", new PXITimeEventDataFileLoaderFactory());
        java.awt.EventQueue.invokeLater(() -> {
            new SingleSyncFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField coincidenceGateField;
    private javax.swing.JFormattedTextField coincidenceScanRangeField;
    private javax.swing.JFormattedTextField coincidenceSteplengthField;
    private javax.swing.JFormattedTextField gpsGateField;
    private javax.swing.JFormattedTextField gpsOffsetField;
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea out;
    private javax.swing.JFormattedTextField syncGateField;
    private javax.swing.JFormattedTextField syncOffsetField;
    private javax.swing.JTextField tdc1FileNameField;
    private javax.swing.JButton tdc1FileSelectionButton;
    private javax.swing.JTextField tdc2FileNameField;
    private javax.swing.JButton tdc2FileSelectionButton;
    // End of variables declaration//GEN-END:variables
    private void perform() {
        tasks.offer((Runnable) () -> {
            doPerform();
        });
    }

    private void doPerform() {
        try {
            SwingUtilities.invokeLater((Runnable) () -> {
                out.setText("");
            });

            //Load TDC file 1.
            TimeEventClusterData clusterData1 = TimeEventDataManager.loadTimeEventClusterData(tdcFile1, "PXI");
            String clusterData1Description = "TDC File 1 loaded." + System.lineSeparator()
                    + "\tChannel 0:\t" + clusterData1.getEventCount(0) + System.lineSeparator()
                    + "\tChannel 1:\t" + clusterData1.getEventCount(1) + System.lineSeparator()
                    + "\tChannel 2:\t" + clusterData1.getEventCount(2) + System.lineSeparator()
                    + "\tChannel 3:\t" + clusterData1.getEventCount(3) + System.lineSeparator()
                    + "\tChannel 4:\t" + clusterData1.getEventCount(4) + System.lineSeparator()
                    + "\tChannel 5:\t" + clusterData1.getEventCount(5) + System.lineSeparator()
                    + System.lineSeparator();
            SwingUtilities.invokeLater((Runnable) () -> {
                out.append(clusterData1Description);
            });

            //Load TDC file 2.
            TimeEventClusterData clusterData2 = TimeEventDataManager.loadTimeEventClusterData(tdcFile2, "PXI");
            String clusterData2Description = "TDC File 2 loaded." + System.lineSeparator()
                    + "\tChannel 0:\t" + clusterData2.getEventCount(0) + System.lineSeparator()
                    + "\tChannel 1:\t" + clusterData2.getEventCount(1) + System.lineSeparator()
                    + "\tChannel 2:\t" + clusterData2.getEventCount(2) + System.lineSeparator()
                    + "\tChannel 3:\t" + clusterData2.getEventCount(3) + System.lineSeparator()
                    + "\tChannel 4:\t" + clusterData2.getEventCount(4) + System.lineSeparator()
                    + "\tChannel 5:\t" + clusterData2.getEventCount(5) + System.lineSeparator()
                    + System.lineSeparator();
            SwingUtilities.invokeLater((Runnable) () -> {
                out.append(clusterData2Description);
            });

            System.out.println("1:\t" + clusterData1.getEventListData(1).get(0).getTimeInSecond());
            System.out.println("2:\t" + clusterData2.getEventListData(1).get(0).getTimeInSecond());
            System.out.println("GPS1:\t" + clusterData1.getEventListData(0).get(0).getTimeInSecond());
            System.out.println("GPS2:\t" + clusterData2.getEventListData(0).get(1).getTimeInSecond());
            System.out.println("SYNC1:\t" + clusterData1.getEventListData(5).get(0).getTimeInSecond());
            System.out.println("SYNC2:\t" + clusterData2.getEventListData(5).get(1).getTimeInSecond());

            Iterator<TimeEventData> iterator = clusterData2.getEventListData(5).iterator();
            TimeEventData lastData = iterator.next();
            while (iterator.hasNext()) {
                TimeEventData data = iterator.next();
                long timeDiff = data.getTime() - lastData.getTime();
                lastData = data;
                double diff = timeDiff / 100000000.;
                if (diff > 1.5 || diff < 0.5) {
                    System.out.println("DIFF: " + diff);
                }
            }

            //GPS Calibration
            int gpsOffset = getInt(gpsOffsetField);
            long gpsGate = getLong(syncGateField);
            RecursionCoincidenceMatcher gpsRecursionCoincidenceMatcher
                    = new RecursionCoincidenceMatcher(clusterData1.getEventListData(0), clusterData2.getEventListData(0),
                            gpsGate, gpsOffset);
            int gpsMatchCount = gpsRecursionCoincidenceMatcher.find();
            SwingUtilities.invokeLater((Runnable) () -> {
                out.append("GPS matched " + gpsMatchCount + System.lineSeparator());
            });
            for (int i = 5; i < 6; i++) {
                TimeCalibrator.calibrate(gpsRecursionCoincidenceMatcher, (SetableTimeEventListData) clusterData2.getEventListData(i));
            }
            SwingUtilities.invokeLater((Runnable) () -> {
                out.append("TimeEvents calibrated by GPS events." + System.lineSeparator());
            });

            System.out.println("GPS calied");
            System.out.println("1:\t" + clusterData1.getEventListData(1).get(0).getTimeInSecond());
            System.out.println("2:\t" + clusterData2.getEventListData(1).get(0).getTimeInSecond());
            System.out.println("GPS1:\t" + clusterData1.getEventListData(0).get(0).getTimeInSecond());
            System.out.println("GPS2:\t" + clusterData2.getEventListData(0).get(1).getTimeInSecond());
            System.out.println("SYNC1:\t" + clusterData1.getEventListData(5).get(0).getTimeInSecond());
            for (int i = 0; i < Integer.MAX_VALUE; i++) {
                double time = clusterData2.getEventListData(5).get(i).getTimeInSecond();
                if (time > 0) {
                    System.out.println("SYNC2:\t" + time);
                    break;
                }
            }
            //Sync Calibration
            int syncOffset = getInt(syncOffsetField);
            long syncGate = getLong(syncGateField);

            RecursionCoincidenceMatcher syncRecursionCoincidenceMatcher
                    = new RecursionCoincidenceMatcher(clusterData1.getEventListData(5), clusterData2.getEventListData(5),
                            syncGate, syncOffset);
            int syncMatchCount = syncRecursionCoincidenceMatcher.find();
            SwingUtilities.invokeLater((Runnable) () -> {
                out.append("SYNC matched " + syncMatchCount + System.lineSeparator());
            });
            for (int i = 0; i < 5; i++) {
                TimeCalibrator.calibrate(syncRecursionCoincidenceMatcher, (SetableTimeEventListData) clusterData2.getEventListData(i));
            }
            SwingUtilities.invokeLater((Runnable) () -> {
                out.append("TimeEvents calibrated by SYNC events." + System.lineSeparator());
            });

            System.out.println("SYNC calid");
            System.out.println("1:\t" + clusterData1.getEventListData(1).get(0).getTimeInSecond());
            for (int i = 0; i < Integer.MAX_VALUE; i++) {
                double time = clusterData2.getEventListData(1).get(i).getTimeInSecond();
                if (time > 0) {
                    System.out.println("2:\t" + time);
                    break;
                }
            }
            System.out.println("GPS1:\t" + clusterData1.getEventListData(0).get(0).getTimeInSecond());
            System.out.println("GPS2:\t" + clusterData2.getEventListData(0).get(1).getTimeInSecond());
            System.out.println("SYNC1:\t" + clusterData1.getEventListData(5).get(0).getTimeInSecond());
            for (int i = 0; i < Integer.MAX_VALUE; i++) {
                double time = clusterData2.getEventListData(5).get(i).getTimeInSecond();
                if (time > 0) {
                    System.out.println("SYNC2:\t" + time);
                    break;
                }
            }

            //Coincidence
            int coincidenceGate = getInt(coincidenceGateField);
            int coincidenceScanRange = 1000 * getInt(coincidenceScanRangeField);
            int coincidenceSteplength = getInt(coincidenceSteplengthField);
            long[][] coincidences = new long[4][4];
            long[][] delay = new long[4][4];
            CoincidenceScaner scaner = new CoincidenceScaner();
            System.out.println("1:\t" + clusterData1.getEventListData(1).get(0).getTime());
            System.out.println("2:\t" + clusterData2.getEventListData(1).get(0).getTime());
            for (int x = 0; x < 4; x++) {
                for (int y = 0; y < 4; y++) {
                    int[] scan = scaner.scan(clusterData1.getEventListData(x + 1), clusterData2.getEventListData(y + 1),
                            coincidenceScanRange, coincidenceGate / coincidenceSteplength, coincidenceSteplength);
                    coincidences[x][y] = scan[0];
                    delay[x][y] = scan[1];
                }
            }
            SwingUtilities.invokeLater((Runnable) () -> {
                out.append("Coincidence scaned." + System.lineSeparator());
                for (int x = 0; x < 4; x++) {
                    for (int y = 0; y < 4; y++) {
                        out.append("\tC" + (x + 1) + "&C" + (y + 1) + ":\t" + coincidences[x][y] + "\t@" + delay[x][y] + "ps" + System.lineSeparator());
                    }
                }
            });

            ////
//            TimeEventListData list1 = clusterData1.getEventListData(1);
//            Iterator<TimeEventData> iterator = list1.iterator();
//            TimeEventData event1 = null;
//            TimeEventData event2 = iterator.next();
//            System.out.println(event2.getTime());
//            while (iterator.hasNext()) {
//                event1 = event2;
//                event2 = iterator.next();
//                System.out.println(event2.getTime() - event1.getTime());
//            }
        } catch (Exception ex) {
            StringWriter stringWriter = new StringWriter();
            ex.printStackTrace(new PrintWriter(stringWriter));
            SwingUtilities.invokeLater((Runnable) () -> {
                out.append(System.lineSeparator() + System.lineSeparator()
                        + "Exception!" + System.lineSeparator()
                        + stringWriter.toString());
            });
        }
    }

    private int getInt(JFormattedTextField field) {
        Object valueObject = field.getValue();
        if (valueObject instanceof Integer) {
            return (int) valueObject;
        }
        if (valueObject instanceof Long) {
            return (int) ((long) valueObject);
        }
        throw new RuntimeException();
    }

    private long getLong(JFormattedTextField field) {
        Object valueObject = field.getValue();
        if (valueObject instanceof Integer) {
            return (long) ((int) valueObject);
        }
        if (valueObject instanceof Long) {
            return (long) valueObject;
        }
        throw new RuntimeException();
    }
}
